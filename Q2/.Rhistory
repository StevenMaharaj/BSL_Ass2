T_y <- rep(0,iter)
library(mvtnorm)
par<-matrix(0,iter,p+1)  #storing iterations, beta (length p) + tau (length 1)
for( i in 1:iter){
beta <- rmvnorm(1,mean=betahat,sigma=XTXinv/tau) #sample beta
beta <- as.numeric(beta)
err  <- y-X%*%beta
tau  <- rgamma(1,0.5*n,0.5*sum(err^2))          #sample tau.
par[i,] <-c(beta,tau)                           #store current round of beta, tau in par.
# posterior checking
Xbeta_rep <- X%*%as.vector(beta)
y_rep <- Xbeta_rep+rnorm(length(y))*sqrt(1/tau)
err_rep  <- y_rep-Xbeta_rep
#
T_rep[i] <- sum(err_rep^2)
T_y[i] <- sum(err^2)
}
print(prop.table(table(T_rep>T_y))[TRUE])
par <-par[-c(1:burnin),]                          #removing the first iterations
par[,3] <- 1/par[,3]
colnames(par) <- c('beta0','beta1','sigma2')
return(par)
}
data<-HironWild
response<-data$logsf  #response variable
n<-dim(data)[1]
intercept <-matrix(1,n,1) #Intercept (to be estimated without penalty)
X <- cbind(intercept,data$time)
# run two chains
system.time(chain1<-Gibbs.lm1(X=X,y=response,tau0=1/Sigma2,iter=10000,burnin=1000))
system.time(chain2<-Gibbs.lm1(X=X,y=response,tau0=1/Sigma2,iter=10000,burnin=1000))
# Remove every second iteration to reduce auto - corrlation
chain1 <- chain1[seq(1,dim(chain1)[1],by=2),]
chain2 <- chain2[seq(1,dim(chain2)[1],by=2),]
#This is a Gibbs sampler where beta is updated as a block. The arguments are
#X:  matrix of predictors dimension n times p. Includes the intercept.
#y:  response vector, length p.
#tau0: initial value for the residual precision.
#iter: number of iterations
#burnin: number of initial iterations to remove
Gibbs.lm1<-function(X,y,tau0,iter,burnin){
p <- dim(X)[2]       #number of predictors
# X <- as.numeric(X)
# y <- as.numeric(y)
XTX <- crossprod(X)
XTXinv <-solve(XTX)
XTY <- crossprod(X,y)
betahat<-solve(XTX,XTY) #betahat = (t(X)%*%X)^{-1}t(X)%*%y = mean of conditional posterior for beta
tau    <-tau0
T_rep <- rep(0,iter)
T_y <- rep(0,iter)
library(mvtnorm)
par<-matrix(0,iter,p+1)  #storing iterations, beta (length p) + tau (length 1)
for( i in 1:iter){
beta <- rmvnorm(1,mean=betahat,sigma=XTXinv/tau) #sample beta
beta <- as.numeric(beta)
err  <- y-X%*%beta
tau  <- rgamma(1,0.5*n,0.5*sum(err^2))          #sample tau.
par[i,] <-c(beta,tau)                           #store current round of beta, tau in par.
# posterior checking
Xbeta_rep <- X%*%as.vector(beta)
y_rep <- Xbeta_rep+rnorm(length(y))*sqrt(1/tau)
err_rep  <- y_rep-Xbeta_rep
#
T_rep[i] <- sum(err_rep^2)
T_y[i] <- sum(err^2)
}
print(prop.table(table(T_rep>T_y))$TRUE)
#This is a Gibbs sampler where beta is updated as a block. The arguments are
#X:  matrix of predictors dimension n times p. Includes the intercept.
#y:  response vector, length p.
#tau0: initial value for the residual precision.
#iter: number of iterations
#burnin: number of initial iterations to remove
Gibbs.lm1<-function(X,y,tau0,iter,burnin){
p <- dim(X)[2]       #number of predictors
# X <- as.numeric(X)
# y <- as.numeric(y)
XTX <- crossprod(X)
XTXinv <-solve(XTX)
XTY <- crossprod(X,y)
betahat<-solve(XTX,XTY) #betahat = (t(X)%*%X)^{-1}t(X)%*%y = mean of conditional posterior for beta
tau    <-tau0
T_rep <- rep(0,iter)
T_y <- rep(0,iter)
library(mvtnorm)
par<-matrix(0,iter,p+1)  #storing iterations, beta (length p) + tau (length 1)
for( i in 1:iter){
beta <- rmvnorm(1,mean=betahat,sigma=XTXinv/tau) #sample beta
beta <- as.numeric(beta)
err  <- y-X%*%beta
tau  <- rgamma(1,0.5*n,0.5*sum(err^2))          #sample tau.
par[i,] <-c(beta,tau)                           #store current round of beta, tau in par.
# posterior checking
Xbeta_rep <- X%*%as.vector(beta)
y_rep <- Xbeta_rep+rnorm(length(y))*sqrt(1/tau)
err_rep  <- y_rep-Xbeta_rep
#
T_rep[i] <- sum(err_rep^2)
T_y[i] <- sum(err^2)
}
print(prop.table(table(T_rep>T_y))["TRUE"])
par <-par[-c(1:burnin),]                          #removing the first iterations
par[,3] <- 1/par[,3]
colnames(par) <- c('beta0','beta1','sigma2')
return(par)
}
data<-HironWild
response<-data$logsf  #response variable
n<-dim(data)[1]
intercept <-matrix(1,n,1) #Intercept (to be estimated without penalty)
X <- cbind(intercept,data$time)
# run two chains
system.time(chain1<-Gibbs.lm1(X=X,y=response,tau0=1/Sigma2,iter=10000,burnin=1000))
system.time(chain2<-Gibbs.lm1(X=X,y=response,tau0=1/Sigma2,iter=10000,burnin=1000))
# Remove every second iteration to reduce auto - corrlation
chain1 <- chain1[seq(1,dim(chain1)[1],by=2),]
chain2 <- chain2[seq(1,dim(chain2)[1],by=2),]
#This is a Gibbs sampler where beta is updated as a block. The arguments are
#X:  matrix of predictors dimension n times p. Includes the intercept.
#y:  response vector, length p.
#tau0: initial value for the residual precision.
#iter: number of iterations
#burnin: number of initial iterations to remove
Gibbs.lm1<-function(X,y,tau0,iter,burnin){
p <- dim(X)[2]       #number of predictors
# X <- as.numeric(X)
# y <- as.numeric(y)
XTX <- crossprod(X)
XTXinv <-solve(XTX)
XTY <- crossprod(X,y)
betahat<-solve(XTX,XTY) #betahat = (t(X)%*%X)^{-1}t(X)%*%y = mean of conditional posterior for beta
tau    <-tau0
T_rep <- rep(0,iter)
T_y <- rep(0,iter)
library(mvtnorm)
par<-matrix(0,iter,p+1)  #storing iterations, beta (length p) + tau (length 1)
for( i in 1:iter){
beta <- rmvnorm(1,mean=betahat,sigma=XTXinv/tau) #sample beta
beta <- as.numeric(beta)
err  <- y-X%*%beta
tau  <- rgamma(1,0.5*n,0.5*sum(err^2))          #sample tau.
par[i,] <-c(beta,tau)                           #store current round of beta, tau in par.
# posterior checking
Xbeta_rep <- X%*%as.vector(beta)
y_rep <- Xbeta_rep+rnorm(length(y))*sqrt(1/tau)
err_rep  <- y_rep-Xbeta_rep
#
T_rep[i] <- sum(err_rep^2)
T_y[i] <- sum(err^2)
}
print("Performing posterior predictive checking we have a p value")
pval <- prop.table(table(T_rep>T_y))["TRUE"]
print(pval)
par <-par[-c(1:burnin),]                          #removing the first iterations
par[,3] <- 1/par[,3]
colnames(par) <- c('beta0','beta1','sigma2')
return(par)
}
data<-HironWild
response<-data$logsf  #response variable
n<-dim(data)[1]
intercept <-matrix(1,n,1) #Intercept (to be estimated without penalty)
X <- cbind(intercept,data$time)
# run two chains
system.time(chain1<-Gibbs.lm1(X=X,y=response,tau0=1/Sigma2,iter=10000,burnin=1000))
system.time(chain2<-Gibbs.lm1(X=X,y=response,tau0=1/Sigma2,iter=10000,burnin=1000))
# Remove every second iteration to reduce auto - corrlation
chain1 <- chain1[seq(1,dim(chain1)[1],by=2),]
chain2 <- chain2[seq(1,dim(chain2)[1],by=2),]
chain12 <- rbind(chain1,chain2)
View(chain12)
View(chain12)
mean(chain12)
chain12 <- rbind(chain1,chain2)
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
print(paste("For "),para_names[i])
chain <-  chain12[,i]
chain_stats <- c(mean(chain),std(chain))
}
chain12 <- rbind(chain1,chain2)
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats <- c(mean(chain),std(chain))
}
chain12 <- rbind(chain1,chain2)
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats <- c(mean(chain),sd(chain))
}
chain12 <- rbind(chain1,chain2)
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain))
}
chain12 <- rbind(chain1,chain2)
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,:] <- c(mean(chain),sd(chain))
chain12 <- rbind(chain1,chain2)
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain))
}
chain12 <- rbind(chain1,chain2)
chain_stats[i,] <- matrix(nrow = 3,ncol =3 )
chain12 <- rbind(chain1,chain2)
chain_stats[i,] <- matrix(nrow = 3,ncol =3 )
chain12 <- rbind(chain1,chain2)
chain_stats <- matrix(nrow = 3,ncol =3 )
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),c(1,1))
}
chain12 <- rbind(chain1,chain2)
chain_stats <- matrix(nrow = 3,ncol =3 )
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1)
}
chain12 <- rbind(chain1,chain2)
chain_stats <- data.fame(matrix(nrow = 3,ncol =3 ))
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =3 ))
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1)
}
View(chain_stats)
View(chain_stats)
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =3 ))
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),c(1,1))
}
View(chain_stats)
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =4 ))
para_names <- c('beta0','beta1','sigma2')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1,1)
}
View(chain_stats)
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =4 ))
para_names <- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1,1)
}
name(chain_stats)<- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
View(chain_stats)
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =4 ))
para_names <- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1,1)
}
colnames(chain_stats)<- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
View(chain_stats)
names(chain_stats)
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =4 ))
para_names <- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1,1)
}
names(chain_stats)<- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =5 ))
para_names <- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1,1)
}
row.names(chain_stats)
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =4 ))
para_names <- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1,1)
}
names(chain_stats)<- c('beta0','beta1','sigma2')
row.names(chain_stats) <- c("posterior mean","std",'lower_CI95','upper_CI95')
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =4 ))
para_names <- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
for (i in 1:3) {
chain <-  chain12[,i]
chain_stats[i,] <- c(mean(chain),sd(chain),1,1)
}
names(chain_stats)<- c("posterior mean","std",'lower_CI95','upper_CI95')
row.names(chain_stats) <- c('beta0','beta1','sigma2')
quantile(chain, c(0.05, 0.975))
quantile(sort(chain), c(0.05, 0.975))
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =4 ))
para_names <- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
for (i in 1:3) {
chain <-  chain12[,i]
quat <- quantile(sort(chain), c(0.05, 0.975))
chain_stats[i,] <- c(mean(chain),sd(chain),quat)
}
names(chain_stats)<- c("posterior mean","std",'lower_CI95','upper_CI95')
row.names(chain_stats) <- c('beta0','beta1','sigma2')
# chain results
chain_stats
set.seed(695281) #Please change random seed to your student id number.
library(dplyr)
library(mvtnorm)
library(coda)
mcmc(chain1)
chains <- mcmc.list(chain1,chain2)
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains)
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains)
legend("Chain 1","Chain 2")
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains)
legend("Chain 1","Chain 2")
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains)
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- as.mcmc.list(as.mcmc(chain1),mcmc(chain2))
plot(chains)
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains)
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1[,1]),mcmc(chain2[,1]))
plot(chains)
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains[,1])
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
lines(chains[,1],type='l',col=3,ylab=expression(beta[5]))
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
# lines(chains[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chains[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains,type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
# lines(chains[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chains[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
View(chains)
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot[chains[[1]]
# plot(chains,type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
# lines(chains[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chains[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains[[1]])
# plot(chains,type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
# lines(chains[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chains[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains)
# plot(chains,type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
# lines(chains[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chains[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chains,ylim=c(-0.5,0.9))
# plot(chains,type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
# lines(chains[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chains[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1,type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
# lines(chains[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chains[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
lines(chain1[,1],type='l',col=3,ylab=expression(beta[5]))
lines(chains[,1],type='l',col=2,ylab=expression(beta[5]))
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
lines(chain2[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chain[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
View(chains)
View(chain12)
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
# lines(chain2[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chain[,1],type='l',col=2,ylab=expression(beta[5]))
# legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
lines(chain2[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chain[,1],type='l',col=2,ylab=expression(beta[5]))
# legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chain1[,1]
plot(chain1[,1])
plot(chain1[,1],type='l',ylim=c(-0.5,0.9),ylab=expression(beta[0]))
plot(chain1[,1],type='l',ylab=expression(beta[0]))
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylab=expression(beta[0]))
lines(chain2[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chain[,1],type='l',col=2,ylab=expression(beta[5]))
# legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylab=expression(beta[0]))
# lines(chain2[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chain[,1],type='l',col=2,ylab=expression(beta[5]))
# legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylab=expression(beta[0]))
lines(chain1[,1],type='l',col=3,ylab=expression(beta[5]))
# lines(chain[,1],type='l',col=2,ylab=expression(beta[5]))
# legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylab=expression(beta[0]))
lines(chain1[,1],type='l',col=3,ylab=expression(beta[5]))
lines(chain2[,1],type='l',col=2,ylab=expression(beta[5]))
# legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylab=expression(beta[0]))
lines(chain1[,1],type='l',col=3,ylab=expression(beta[5]))
lines(chain2[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylab=expression(beta[0]))
lines(chain1[,1],type='l',col=3,ylab=expression(beta[5]))
lines(chain2[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'))
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
plot(chain1[,1],type='l',ylab=expression(beta[0]))
lines(chain1[,1],type='l',col=1,ylab=expression(beta[5]))
lines(chain2[,1],type='l',col=2,ylab=expression(beta[5]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
plot(chain1[,2],type='l',ylab=expression(beta[1]))
lines(chain1[,2],type='l',col=1,ylab=expression(beta[1]))
lines(chain2[,2],type='l',col=2,ylab=expression(beta[1]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
# sigma^2
plot(chain1[,3],type='l',ylab=expression(sigma))
lines(chain1[,3],type='l',col=1,ylab=expression(beta[1]))
lines(chain2[,3],type='l',col=2,ylab=expression(beta[1]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
# sigma^2
plot(chain1[,3],type='l',ylab=expression(sigma^2))
lines(chain1[,3],type='l',col=1,ylab=expression(beta[1]))
lines(chain2[,3],type='l',col=2,ylab=expression(beta[1]))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
# sigma^2
plot(chain1[,3],type='l',ylab=expression(sigma^2))
lines(chain1[,3],type='l',col=1,ylab=expression(sigma^2))
lines(chain2[,3],type='l',col=2,ylab=expression(sigma^2))
legend('topright',legend=c('Chain 1','Chain 2'),col=1:2,lty=1,bty='n')
#Gelman-Rubin diagnostic
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
gelman.diag(chains)
#Gelman-Rubin diagnostic
chains <- mcmc.list(mcmc(chain1),mcmc(chain2))
gelman.diag(chains)[[1]]
# Fit regresssion for all of the data
full_model <- lm(logsf ~ time,data = Hiron)
summary(full_model)
confint(full_model)
chain12 <- rbind(chain1,chain2)
chain_stats <- data.frame(matrix(nrow = 3,ncol =4 ))
para_names <- c('beta0','beta1','sigma2','lower_CI95','upper_CI95')
for (i in 1:3) {
chain <-  chain12[,i]
quat <- quantile(sort(chain), c(0.05, 0.975))
chain_stats[i,] <- c(mean(chain),sd(chain),quat)
}
names(chain_stats)<- c("posterior mean","std",'lower_CI95','upper_CI95')
row.names(chain_stats) <- c('beta0','beta1','sigma2')
# chain results
chain_stats
data<-HironWild
response <- data$logsf  #response variable
n<-dim(data)[1]
intercept <-matrix(1,n,1) #Intercept (to be estimated without penalty)
X <- cbind(intercept,data$time)
# run two chains
system.time(chain1<-Gibbs.lm1(X=X,y=response,tau0=1/Sigma2,iter=10000,burnin=1000))
system.time(chain2<-Gibbs.lm1(X=X,y=response,tau0=1/Sigma2,iter=10000,burnin=1000))
# Remove every second iteration to reduce auto - corrlation
chain1 <- chain1[seq(1,dim(chain1)[1],by=2),]
chain2 <- chain2[seq(1,dim(chain2)[1],by=2),]
